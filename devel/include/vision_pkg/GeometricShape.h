// Generated by gencpp from file vision_pkg/GeometricShape.msg
// DO NOT EDIT!


#ifndef VISION_PKG_MESSAGE_GEOMETRICSHAPE_H
#define VISION_PKG_MESSAGE_GEOMETRICSHAPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace vision_pkg
{
template <class ContainerAllocator>
struct GeometricShape_
{
  typedef GeometricShape_<ContainerAllocator> Type;

  GeometricShape_()
    : shape_type()
    , key_points()  {
    }
  GeometricShape_(const ContainerAllocator& _alloc)
    : shape_type(_alloc)
    , key_points(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_type_type;
  _shape_type_type shape_type;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _key_points_type;
  _key_points_type key_points;





  typedef boost::shared_ptr< ::vision_pkg::GeometricShape_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_pkg::GeometricShape_<ContainerAllocator> const> ConstPtr;

}; // struct GeometricShape_

typedef ::vision_pkg::GeometricShape_<std::allocator<void> > GeometricShape;

typedef boost::shared_ptr< ::vision_pkg::GeometricShape > GeometricShapePtr;
typedef boost::shared_ptr< ::vision_pkg::GeometricShape const> GeometricShapeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_pkg::GeometricShape_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_pkg::GeometricShape_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_pkg::GeometricShape_<ContainerAllocator1> & lhs, const ::vision_pkg::GeometricShape_<ContainerAllocator2> & rhs)
{
  return lhs.shape_type == rhs.shape_type &&
    lhs.key_points == rhs.key_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_pkg::GeometricShape_<ContainerAllocator1> & lhs, const ::vision_pkg::GeometricShape_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_pkg::GeometricShape_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_pkg::GeometricShape_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_pkg::GeometricShape_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_pkg::GeometricShape_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_pkg::GeometricShape_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_pkg::GeometricShape_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_pkg::GeometricShape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ca4cd4b5167d5ea4d1ac1c67df51125";
  }

  static const char* value(const ::vision_pkg::GeometricShape_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ca4cd4b5167d5eaULL;
  static const uint64_t static_value2 = 0x4d1ac1c67df51125ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_pkg::GeometricShape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_pkg/GeometricShape";
  }

  static const char* value(const ::vision_pkg::GeometricShape_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_pkg::GeometricShape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string shape_type\n"
"geometry_msgs/Point[] key_points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::vision_pkg::GeometricShape_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_pkg::GeometricShape_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shape_type);
      stream.next(m.key_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeometricShape_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_pkg::GeometricShape_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_pkg::GeometricShape_<ContainerAllocator>& v)
  {
    s << indent << "shape_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape_type);
    s << indent << "key_points[]" << std::endl;
    for (size_t i = 0; i < v.key_points.size(); ++i)
    {
      s << indent << "  key_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.key_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_PKG_MESSAGE_GEOMETRICSHAPE_H
